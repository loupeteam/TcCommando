<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PLCopenCall" Id="{16877e71-b30e-4975-8b7d-5ec1774f2055}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PLCopenCall IMPLEMENTS IPLCopenCall
VAR_INPUT
    Execute : BOOL;
    CommandInternal : IPLCopenCommand;
    Fallback : PLCopenStatusBase;
END_VAR
VAR_OUTPUT
    Status : PLCopenStatusBase;
    Busy : BOOL;
    Done : BOOL;
    Error : BOOL;
    CommandAborted : BOOL;
END_VAR
VAR
    _PLCopenCallInternal : PLCopenCallInternal;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

Call();]]></ST>
    </Implementation>
    <Folder Name="API" Id="{81b669e9-53d1-43c3-adb5-dd314cabfeda}" />
    <Folder Name="internal" Id="{3ca49896-8361-42f2-89ba-941a123d684d}" />
    <Method Name="Aborted" Id="{d852b156-0dcb-4482-b2e7-1df0a5df8a63}" FolderPath="internal\">
      <Declaration><![CDATA[METHOD Aborted : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

_PLCopenCallInternal._abort := true;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Call" Id="{678db6c7-a95b-4103-a6a7-438e03861a08}" FolderPath="internal\">
      <Declaration><![CDATA[METHOD Call : BOOL
VAR
    _break : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

//Capture edges
IF NOT Execute THEN
    _PLCopenCallInternal._execute := FALSE;
END_IF

// Start a new command on edge
IF (Execute AND NOT _PLCopenCallInternal._execute) THEN
    _PLCopenCallInternal._execute := TRUE;
    _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_NEW_COMMAND;
END_IF

// If this call get aborted, handle it
IF (_PLCopenCallInternal._abort) THEN
    _PLCopenCallInternal._abort := 0;
    _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_ABORTED;
END_IF

_PLCopenCallInternal._self := THIS^;

// Use a "while not break" to enable multiple passes on the state machine,
// to do as much as possible in a single call	
_break := FALSE;

WHILE _break = FALSE DO
    CASE (_PLCopenCallInternal._state) OF

        // IDLE
        PLCopenCallState.PLCOPEN_FUB_IDLE:
            Status := PLCopenStatusBase.NOT_ENABLED;
            Busy := FALSE;
            Done := FALSE;
            Error := FALSE;
            CommandAborted := FALSE;
            _break := TRUE;

        // Start a new command
        PLCopenCallState.PLCOPEN_FUB_NEW_COMMAND:
            Status := PLCopenStatusBase.BUSY;
            _PLCopenCallInternal._RemoteStatus := PLCopenStatusBase.BUSY;
            Busy := TRUE;
            Done := FALSE;
            Error := FALSE;
            CommandAborted := FALSE;

            // If this call is the current command:
            // 1. don't need feedback (TODO why? because it is being aborted?)
            // 2. this call doesn't get the abort
            // so remove this FUB before calling abort previous
            IF _PLCopenCallInternal._Command <> 0 THEN
                IF _PLCopenCallInternal._Command.Remote = _PLCopenCallInternal._self THEN
                    _PLCopenCallInternal._Command.Remote := 0;
                END_IF
            END_IF

            // Get the new command
            _PLCopenCallInternal._command := CommandInternal;

            IF _PLCopenCallInternal._Command <> 0 THEN
                _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_ABORT_OLD;
                // No _break
            ELSE
                _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_WORKING;
                _PLCopenCallInternal._RemoteStatus := Fallback;
                _break := TRUE;
            END_IF
        // No _break

        // Abort any commands that were active using the same PLCopen state
        PLCopenCallState.PLCOPEN_FUB_ABORT_OLD:
            _PLCopenCallInternal._Command.AbortPreviousCommands(_PLCopenCallInternal._Command);

            _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_SET_COMMAND;
        //no break;

        // Start the command
        PLCopenCallState.PLCOPEN_FUB_SET_COMMAND:
            _PLCopenCallInternal._Command.Execute := TRUE;
            _PLCopenCallInternal._Command.Remote := THIS^;

            Busy := TRUE;
            _PLCopenCallInternal._state := PLCOpenCallState.PLCOPEN_FUB_WORKING;
        // No _break

        //Wait for the command to be finished
        PLCopenCallState.PLCOPEN_FUB_WORKING:
            Busy := TRUE;
            // No _break

            IF (_PLCopenCallInternal._RemoteStatus <> PLCopenStatusBase.BUSY AND
                _PLCopenCallInternal._RemoteStatus <> PLCopenStatusBase.ENABLED_WAITING) THEN
                Status := _PLCopenCallInternal._RemoteStatus;
                Busy := FALSE;

                IF (Status = 0) THEN
                    Done := TRUE;

                ELSE
                    Error := TRUE;
                END_IF

                _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_CLEANUP;
                // No _break
            ELSE
                _break := TRUE;
            END_IF

        PLCopenCallState.PLCOPEN_FUB_CLEANUP:
            // Remove self from the source command
            IF _PLCopenCallInternal._Command <> 0 THEN
                _PLCopenCallInternal._Command.Remote := 0;
                _PLCopenCallInternal._Command := 0;
            END_IF

            _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_DONE;
            // Break to force at least 1 cycle with statuses
            _break := TRUE;

        PLCopenCallState.PLCOPEN_FUB_DONE:

            IF (NOT Execute) THEN
                _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_IDLE;
                Status := PLCopenStatusBase.NOT_ENABLED;
                Busy := FALSE;
                Done := FALSE;
                Error := FALSE;
                CommandAborted := FALSE;
            END_IF

            _break := TRUE;

        PLCopenCallState.PLCOPEN_FUB_ABORTED:
            Status := PLCopenStatusBase.ABORTED;
            Busy := FALSE;
            Done := FALSE;
            Error := FALSE;
            CommandAborted := TRUE;
            _PLCopenCallInternal._command := 0;
            _PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_DONE;
            _break := TRUE;

    END_CASE
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{5ea1194b-610a-4d48-bac7-dee9cee2d7d6}" FolderPath="API\">
      <Declaration><![CDATA[METHOD Clear : PLCopenStatusBase
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

THIS^.Execute := FALSE;
THIS^._PLCopenCallInternal._state := PLCopenCallState.PLCOPEN_FUB_CLEANUP;
//One call to cleanup
THIS^.Call();
//Second call to clear
THIS^.Call();
Clear := THIS^.Status;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Errored" Id="{01a1ddfd-7791-443d-a60a-4fecd77dd437}" FolderPath="internal\">
      <Declaration><![CDATA[METHOD Errored : BOOL
VAR_INPUT
    ID : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CASE ID OF
    //Any of these statuses are invalid to return as an error.
    //Override to error
    PLCopenStatusBase.BUSY,
        PLCopenStatusBase.ENABLED_WAITING,
        PLCopenStatusBase.ERR_OK:
        _PLCopenCallInternal._RemoteStatus := PLCopenStatusBase.ERROR;
ELSE
    //Any other status can be passed through
    _PLCopenCallInternal._RemoteStatus := ID;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Exec" Id="{e15badc6-3209-4aba-84cb-107a0ef3c14b}" FolderPath="API\">
      <Declaration><![CDATA[METHOD Exec : PLCopenStatusBase
VAR_INPUT
    Command : IPLCopenCommand;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

//Call with false to force an edge
//	This will also Abort the previous command if it exists
THIS^.Execute := FALSE;
THIS^.Call();

THIS^.CommandInternal := Command;
THIS^.Execute := TRUE;
THIS^.Call();
Exec := THIS^.Status;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Finished" Id="{f01f5879-6af5-40cc-8d64-3d5824931435}" FolderPath="internal\">
      <Declaration><![CDATA[METHOD Finished : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

_PLCopenCallInternal._RemoteStatus := PLCopenStatusBase.ERR_OK;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{b16dfd08-c0f6-43db-a57d-608fa4a860b4}" FolderPath="API\">
      <Declaration><![CDATA[METHOD Start : BOOL
VAR_INPUT
    Command : IPLCopenCommand;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

THIS^.Exec(Command);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>