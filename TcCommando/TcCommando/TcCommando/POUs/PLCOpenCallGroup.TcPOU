<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PLCopenCallGroup" Id="{cba9c738-238a-4f8b-b4d1-3486de669f1d}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK PLCopenCallGroup
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
  _callGroup : PLCopenCallGroupType;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
]]></ST>
    </Implementation>
    <Folder Name="API" Id="{fb09183a-54f7-047a-3485-8e6859a5d681}" />
    <Folder Name="internal" Id="{beafbdd8-261d-0a4b-0a06-801311af234c}" />
    <Property Name="Busy" Id="{365e6aa2-05a5-093c-3b46-fde57ca4eb8a}" FolderPath="API\">
      <Declaration><![CDATA[PROPERTY Busy : BOOL]]></Declaration>
      <Get Name="Get" Id="{708104a0-2307-0952-0586-659817ab29e1}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CheckStatus();

//Check if we are busy
Busy := _callGroup._isBusy;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CheckStatus" Id="{69b5b758-9323-4002-906a-f59304b6dbf8}" FolderPath="internal\">
      <Declaration><![CDATA[
METHOD PRIVATE CheckStatus : BOOL
VAR
  _commandIndex : INT;
  _anyAbort : BOOL;
  _anyBusy : BOOL;
  _anyError : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.
IF _callGroup._isBusy THEN
	//If it's not in the list
	FOR _commandIndex := 0 TO GVLTcCommando.MAX_RELATED_GROUPS DO
	  IF _callGroup._commands[_commandIndex].Command <> 0 THEN
		_callGroup._commands[_commandIndex]();
	
		IF _callGroup._commands[_commandIndex].CommandAborted THEN
		  _anyAbort := TRUE;
		ELSIF _callGroup._commands[_commandIndex].Error THEN
		  _anyError := TRUE;
		ELSIF _callGroup._commands[_commandIndex].Busy THEN
		  _anyBusy := TRUE;
		ELSE
		  _callGroup._commands[_commandIndex].Command := 0;
		END_IF
	  END_IF
	END_FOR
	
	_callGroup._isError := FALSE;
	_callGroup._isAbort := FALSE;
	_callGroup._isDone := FALSE;
	
	IF _anyError OR _callGroup._syncError THEN
	  _callGroup._isError := TRUE;
	  _callGroup._isBusy := FALSE;
	ELSIF _anyAbort OR _callGroup._syncAbort THEN
	  _callGroup._isAbort := TRUE;
	  _callGroup._isBusy := FALSE;
	ELSIF NOT _anyBusy THEN
	  _callGroup._isDone := TRUE;
	  _callGroup._isBusy := FALSE;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="CommandAborted" Id="{96e569b0-457f-4c6e-bec1-643c895a8b9c}" FolderPath="API\">
      <Declaration><![CDATA[PROPERTY CommandAborted : BOOL
]]></Declaration>
      <Get Name="Get" Id="{17cd4830-83fc-4522-8782-e508fda2b93d}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CheckStatus();

CommandAborted := _callGroup._isAbort;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Done" Id="{c890f33c-6dc4-4031-a7ae-121d8a0f3c09}" FolderPath="API\">
      <Declaration><![CDATA[PROPERTY Done : BOOL
]]></Declaration>
      <Get Name="Get" Id="{c8d0c1b7-b1e0-412a-9a10-7c15d2555f02}">
        <Declaration><![CDATA[
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CheckStatus();

//Check if we are done
Done := _callGroup._isDone;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Error" Id="{28f1d1b2-fabc-44c9-968e-b0937bbe9074}" FolderPath="API\">
      <Declaration><![CDATA[PROPERTY Error : BOOL
]]></Declaration>
      <Get Name="Get" Id="{24b146e6-8584-4378-a902-a6d936d8a944}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

CheckStatus();

Error := _callGroup._isError;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{cd896665-6c8b-4e15-8c06-75a5a8e469f2}" FolderPath="API\">
      <Declaration><![CDATA[METHOD Reset : BOOL
VAR
  _commandIndex : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

//If it's not in the list
FOR _commandIndex := 0 TO GVLTcCommando.MAX_RELATED_GROUPS DO
  _callGroup._commands[_commandIndex].Reset();
END_FOR

_callGroup._isBusy := FALSE;
_callGroup._isAbort := FALSE;
_callGroup._isDone := FALSE;
_callGroup._isError := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{df0ebf2c-61b1-498a-bcc4-44d1e2466b24}" FolderPath="API\">
      <Declaration><![CDATA[
METHOD Start : BOOL
VAR_INPUT
  Command : IPLCopenCommand;
END_VAR
VAR
  _commandIndex : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

// Check if it's already in the list
FOR _commandIndex := 0 TO GVLTcCommando.MAX_RELATED_GROUPS DO
  IF _callGroup._commands[_commandIndex].Command = Command THEN
    _callGroup._commands[_commandIndex].Start(Command);
    Start := TRUE;
	_callGroup._isBusy := TRUE;
    RETURN;
  END_IF
END_FOR

// If it's not in the list
FOR _commandIndex := 0 TO GVLTcCommando.MAX_RELATED_GROUPS DO
  IF _callGroup._commands[_commandIndex].Command = 0 THEN
    _callGroup._commands[_commandIndex].Start(Command);
    Start := TRUE;
	_callGroup._isBusy := TRUE;
    RETURN;
  END_IF
END_FOR

Start := FALSE;

//TODO: All out of commands.. Throw an error
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>