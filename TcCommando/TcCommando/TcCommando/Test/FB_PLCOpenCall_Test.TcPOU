<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PLCOpenCall_Test" Id="{11b00080-9eb7-435e-b91b-311812c3e08c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PLCOpenCall_Test EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Call();
Clear();
Exec();
Start();]]></ST>
    </Implementation>
    <Method Name="Call" Id="{191016cf-95da-4fad-aea1-2f6fad08115d}">
      <Declaration><![CDATA[METHOD Call
VAR
	call : PLCOpenCall;
	command : PLCOpenCommand;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('PLCOpenCallIdle');


	AssertFalse(Condition := call.Busy, Message := 'Busy should be false as default');
	AssertFalse(Condition := call.Done, Message := 'Done should be false as default');
	AssertFalse(Condition := call.Error, Message := 'Error should be false as default');
	
	call.Exec(command);
	AssertTrue(Condition := call.Busy, Message := 'Busy should be true after first exec');
	AssertFalse(Condition := call.Done, Message := 'Done should be false after first exec');
	AssertFalse(Condition := call.Error, Message := 'Error should be false as default');
	AssertEquals_DINT(Expected := PLCOpenStatusBase.BUSY, Actual := call.Status, Message := 'Status should be FUB Working');

// new command

// this command aborted

// cleanup

// done

// working

// aborted

// TODO multiple calls
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{2f219140-8639-4442-9636-f58c99c41e5b}">
      <Declaration><![CDATA[METHOD Clear
VAR
	call : PLCOpenCall();
	status : PLCOpenStatusBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Clear');
	call.Execute := TRUE;
	call();
	status := call.Clear();
	AssertFalse(call.Execute, Message := 'Execute should not be true');
	AssertEquals_INT(Expected := PLCOpenStatusBase.NOT_ENABLED, Actual := status, Message := 'Call status should be not enabled');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Errored" Id="{a53681cb-16c1-46fc-8764-7d1e04f77a4b}">
      <Declaration><![CDATA[METHOD Errored
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Exec" Id="{ee4d2b03-8c4b-4975-8443-00a2021a958d}">
      <Declaration><![CDATA[METHOD Exec
VAR
	call : PLCOpenCall();
	command1 : PLCOpenCommand();
	command2 : PLCOpenCommand();
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Exec');
	call.Exec(command1);
	AssertTrue(call.Execute, Message := 'Execute should be true');
	
	call.Exec(command2);
	AssertTrue(call.Execute, Message := 'Execute should still be true, second command should abort first');
	AssertFalse(command1.Execute, Message := 'Execute should not be true on first command');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{33b29bc8-44e1-4a1e-b951-c14b8679d46f}">
      <Declaration><![CDATA[METHOD Start
VAR
	call : PLCOpenCall();
	command1 : PLCOpenCommand();
	command2 : PLCOpenCommand();
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Start');
    // TODO check cancelling previous command
	
	// NOTE: since Start is just a wrapper around Exec, these tests are the same as Exec
	call.Start(command1);
	AssertTrue(call.Execute, Message := 'Execute should be true');
	
	call.Start(command2);
	AssertTrue(command1.Execute, Message := 'Execute should not be true on first command');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>