<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PLCOpenCommandGroup_Test" Id="{c2e266e0-7e5f-45af-8f7a-be49e67451e7}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'no-analysis'}
FUNCTION_BLOCK PLCOpenCommandGroup_Test EXTENDS TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
EmptyCall();
OneCommand();
]]></ST>
    </Implementation>
    <Method Name="EmptyCall" Id="{346110c2-4c18-41af-994b-98b1e67f77fb}">
      <Declaration><![CDATA[
METHOD EmptyCall
VAR
  caller : PLCopenCall;
  group : PLCopenCommandGroup;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('EmptyCall');

caller.Start(group);
AssertTrue(Condition := caller.Busy, Message := 'Caller must be busy for once cycle');

caller.Execute := FALSE;
caller();
AssertTrue(Condition := caller.Done, Message := 'Caller must be done for once cycle');

caller();
AssertFalse(Condition := caller.Done, Message := 'Done must be false after complete');
AssertFalse(Condition := caller.Busy, Message := 'Busy must be false after complete');
AssertFalse(Condition := caller.Error, Message := 'Error must be false after complete');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OneCommand" Id="{fdc0fb3c-310d-4315-a4c0-16fb34d26615}">
      <Declaration><![CDATA[
METHOD OneCommand
VAR
  caller : PLCopenCall;
  command : PLCopenCommand;
  group : PLCopenCommandGroup;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
TEST('One Command');

group.Subscribe(command);

caller.Start(group);
AssertTrue(Condition := caller.Busy, Message := 'Caller must be busy for once cycle');

AssertTrue(Condition := command.Consume, Message := 'Consume should be true after call');
AssertFalse(Condition := command.Consume, Message := 'Consume should only be true once');

command.Finished();

caller.Execute := FALSE;
caller();
AssertTrue(Condition := caller.Done, Message := 'Caller must be done for once cycle');

caller();
AssertFalse(Condition := caller.Done, Message := 'Done must be false after complete');
AssertFalse(Condition := caller.Busy, Message := 'Busy must be false after complete');
AssertFalse(Condition := caller.Error, Message := 'Error must be false after complete');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>