<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PLCopenCall_Test" Id="{11b00080-9eb7-435e-b91b-311812c3e08c}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK PLCopenCall_Test EXTENDS FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

Abort();
Call();
Clear();
Exec();
Start();
]]></ST>
    </Implementation>
    <Method Name="Abort" Id="{5e3bf46f-cc78-0c00-30ee-e6dd365264ce}">
      <Declaration><![CDATA[
METHOD Abort
VAR
  call1 : PLCopenCall();
  call2 : PLCopenCall();
  command : PLCopenCommand();
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

(*STweep.Disable*)

TEST('Abort');
	
	call1();
	call2();

	call1.Start(command);
	call1.Execute := FALSE;

	AssertEquals_INT(call1.Status, PLCopenStatusBase.BUSY, Message := 'Status should be busy');
	AssertEquals_INT(call2.Status, PLCopenStatusBase.NOT_ENABLED, Message := 'Status should be not enabled');

	AssertTrue(command.Execute, Message := 'Execute should be true on command');
	AssertEquals_INT(command.Status, PLCopenStatusBase.ENABLED_WAITING, Message := 'First command should be waiting');
	
	AssertTrue(command.Consume, Message := 'consume should be true');
	AssertFalse(command.Consume, Message := 'consume should be false on second read');
	AssertEquals_INT(command.Status, PLCopenStatusBase.BUSY, Message := 'Command should be busy');

	call2.Start(Command);
	call2.Execute := FALSE;

	call1();
	AssertEquals_INT(call1.Status, PLCopenStatusBase.ABORTED, Message := 'Status should be aborted');
	AssertEquals_INT(call2.Status, PLCopenStatusBase.BUSY, Message := 'Status should be busy');

	AssertTrue(command.Execute, Message := 'Execute should be true on command');
	AssertEquals_INT(command.Status, PLCopenStatusBase.ENABLED_WAITING, Message := 'First command should be waiting');
	
	AssertTrue(command.Consume, Message := 'consume should be true');
	AssertFalse(command.Consume, Message := 'consume should be false on second read');
	AssertEquals_INT(command.Status, PLCopenStatusBase.BUSY, Message := 'Command should be busy');

	command.Finished();
	
	call1();
	call2();

	AssertEquals_INT(call1.Status, PLCopenStatusBase.NOT_ENABLED, Message := 'Status should be no enabled');
	AssertEquals_INT(call2.Status, PLCopenStatusBase.ERR_OK, Message := 'Status should be err ok');
	
	

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Call" Id="{191016cf-95da-4fad-aea1-2f6fad08115d}">
      <Declaration><![CDATA[
METHOD Call
VAR
  call : PLCopenCall;
  command : PLCopenCommand;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

(*STweep.Disable*)

TEST('PLCopenCallIdle');

	AssertFalse(Condition := call.Busy, Message := 'Busy should be false as default');
	AssertFalse(Condition := call.Done, Message := 'Done should be false as default');
	AssertFalse(Condition := call.Error, Message := 'Error should be false as default');
	
	call.Start(command);
	AssertTrue(Condition := call.Busy, Message := 'Busy should be true after first exec');
	AssertFalse(Condition := call.Done, Message := 'Done should be false after first exec');
	AssertFalse(Condition := call.Error, Message := 'Error should be false as default');
	AssertEquals_DINT(Expected := PLCopenStatusBase.BUSY, Actual := call.Status, Message := 'Status should be FUB Working');

// new command

// this command aborted

// cleanup

// done

// working

// aborted

// TODO multiple calls
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{2f219140-8639-4442-9636-f58c99c41e5b}">
      <Declaration><![CDATA[
METHOD Clear
VAR
  call : PLCopenCall();
  status : PLCopenStatusBase;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

(*STweep.Disable*)

TEST('Clear');
	call.Execute := TRUE;
	call();
	call.ResetStatus();
	status := call.Status;
	AssertFalse(call.Execute, Message := 'Execute should not be true');
	AssertEquals_INT(Expected := PLCopenStatusBase.NOT_ENABLED, Actual := status, Message := 'Call status should be not enabled');
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Errored" Id="{a53681cb-16c1-46fc-8764-7d1e04f77a4b}">
      <Declaration><![CDATA[
METHOD Errored
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

(*STweep.Disable*)

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Exec" Id="{ee4d2b03-8c4b-4975-8443-00a2021a958d}">
      <Declaration><![CDATA[
METHOD Exec
VAR
  call : PLCopenCall();
  command1 : PLCopenCommand();
  command2 : PLCopenCommand();
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

(*STweep.Disable*)

TEST('Exec1');

	call.Start(command1);
	AssertTrue(call.Execute, Message := 'Execute should be true on call');
	AssertTrue(command1.Execute, Message := 'Execute should be true on command');
	AssertEquals_INT(command1.Status, PLCopenStatusBase.ENABLED_WAITING, Message := 'First command should be aborted');
	AssertEquals_INT(command2.Status, PLCopenStatusBase.NOT_ENABLED, Message := 'Second command should be not enabled');
	
	AssertTrue(command1.Consume, Message := 'First command consume should be true');
	AssertFalse(command2.Consume, Message := 'Second command consume should be false');

	AssertFalse(command1.Consume, Message := 'First command consume should be false');
	AssertFalse(command2.Consume, Message := 'Second command consume should be false');

	command1.Finished();

	call();

	AssertEquals_INT(call.Status, PLCopenStatusBase.ERR_OK, Message := 'Call should be Err OK');
	AssertEquals_INT(command1.Status, PLCopenStatusBase.ERR_OK, Message := 'First command should be Err OK');
	AssertEquals_INT(command2.Status, PLCopenStatusBase.NOT_ENABLED, Message := 'Second command should be enabled waiting');
TEST_FINISHED();
TEST('Exec2');
	
//	call.Clear();//DO we need clear?


	call.Start(command2);

//	AssertEquals_INT(command1.Status, PLCopenStatusBase.NOT_ENABLED, Message := 'First command should be Not Enabled');//This is actually not defined, the status doesn't get reset until it's needed again
	AssertEquals_INT(command2.Status, PLCopenStatusBase.ENABLED_WAITING, Message := 'Second command should be enabled waiting');

	AssertFalse(command1.Consume, Message := 'First command consume should be false');
	AssertTrue(command2.Consume, Message := 'Second command consume should be true');

	AssertFalse(command1.Consume, Message := 'First command consume should be false');
	AssertFalse(command2.Consume, Message := 'Second command consume should be false');

	command2.Finished();

	call();

	AssertEquals_INT(call.Status, PLCopenStatusBase.ERR_OK, Message := 'Call should be Err OK');
//	AssertEquals_INT(command1.Status, PLCopenStatusBase.NOT_ENABLED, Message := 'First command should be Not Enabled');//This is actually not defined, the status doesn't get reset until it's needed again
	AssertEquals_INT(command2.Status, PLCopenStatusBase.ERR_OK, Message := 'Second command should be ERR OK');

	
	call.Start(command1);
	AssertEquals_INT(command1.Status, PLCopenStatusBase.ENABLED_WAITING, Message := 'First command should be enabled waiting');
//	AssertEquals_INT(command2.Status, PLCopenStatusBase.NOT_ENABLED, Message := 'Second command should be not enabled');//This is actually not defined, the status doesn't get reset until it's needed again

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Start" Id="{33b29bc8-44e1-4a1e-b951-c14b8679d46f}">
      <Declaration><![CDATA[
METHOD Start
VAR
  call : PLCopenCall();
  command1 : PLCopenCommand();
  command2 : PLCopenCommand();
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Copyright (c) 2024 Loupe (https://loupe.team), provided under the MIT License.

(*STweep.Disable*)

TEST('Start');

	call.Start(command1);
	AssertTrue(command1.Execute, Message := 'Execute should be true');
	
	call.Start(command2);
	AssertTrue(command2.Execute, Message := 'Execute should be true');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>