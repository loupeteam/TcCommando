<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_PLCopenCommand_Test" Id="{0f0750ea-d1ee-4a18-8aa2-27762e9d8df2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PLCopenCommand_Test EXTENDS  TcUnit.FB_TestSuite
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	localCommand : PLCOpenCommand();
	remoteCommand : PLCOpenCommand();
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TEST('LocalCallSuccess');
	TestLocalCall_Success(localCommand);
TEST_FINISHED();

TEST('LocalCallAbort');
	TestLocalCall_Abort(localCommand);
TEST_FINISHED();

TEST('LocalCallError');
	TestLocalCall_Error(localCommand);
TEST_FINISHED();]]></ST>
    </Implementation>
    <Method Name="TestLocalCall_Abort" Id="{411b9336-d620-4448-b02d-c7622c01b45e}">
      <Declaration><![CDATA[METHOD TestLocalCall_Abort
VAR
	localCommand : PLCOpenCommand();
	remoteCommand : PLCOpenCommand();
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should start false');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.NOT_ENABLED, Message := 'Status should be not enabled');

testCommand.Execute := TRUE;

AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.ENABLED_WAITING, Message := 'Status should be waiting');

AssertTrue(Condition := testCommand.Consume, Message := 'Consume Should start as true');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.BUSY, Message := 'Status should be busy');

AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should auto reset');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.BUSY, Message := 'Status should be busy');




testCommand.Execute := TRUE;

AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.ENABLED_WAITING, Message := 'Status should be waiting');

AssertTrue(Condition := testCommand.Consume, Message := 'Peek Should start as true after abort');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.BUSY, Message := 'Status should be busy');

AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should auto reset');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.BUSY, Message := 'Status should be busy');

testCommand.Finished();

AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.ERR_OK, Message := 'Status should be OK after finish');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.NOT_ENABLED, Message := 'Status should auto reset');

AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should auto reset');

testCommand.Execute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestLocalCall_Error" Id="{1a56507b-64b6-4d10-a688-45cc5b0dc888}">
      <Declaration><![CDATA[METHOD TestLocalCall_Error
VAR
	testCommand : PLCOpenCommand();
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should start false');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.NOT_ENABLED, Message := 'Status should be not enabled');

testCommand.Execute := TRUE;

AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.ENABLED_WAITING, Message := 'Status should be waiting');

AssertTrue(Condition := testCommand.Consume, Message := 'Consume Should start as true');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.BUSY, Message := 'Status should be busy');

AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should auto reset');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.BUSY, Message := 'Status should be busy');

testCommand.Errored(1337);

AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should be false');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.ERROR, Message := 'Status should be error');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.NOT_ENABLED, Message := 'Status should auto reset');

testCommand.Finished();

AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.NOT_ENABLED, Message := 'Status should be not enabled if it happens after error');

AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should auto reset');

testCommand.Execute := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestLocalCall_Success" Id="{25b22591-3533-478f-bf71-aa6877370f35}">
      <Declaration><![CDATA[METHOD TestLocalCall_Success
VAR
	testCommand : PLCOpenCommand();
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should start false');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.NOT_ENABLED, Message := 'Status should be not enabled');

testCommand.Execute := TRUE;

AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.ENABLED_WAITING, Message := 'Status should be waiting');

AssertTrue(Condition := testCommand.Consume, Message := 'Consume Should start as true');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.BUSY, Message := 'Status should be busy');

AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should auto reset');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.BUSY, Message := 'Status should be busy');

testCommand.Finished();
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.ERR_OK, Message := 'Status should be OK after finish');
AssertEquals_DINT(Actual := testCommand.status, Expected:= PLCOpenStatusBase.NOT_ENABLED, Message := 'Status should auto reset');

AssertFalse(Condition := testCommand.Consume, Message := 'Consume Should auto reset');

testCommand.Execute := FALSE;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>